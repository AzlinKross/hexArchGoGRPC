// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: arithmetic_svc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_arithmetic_svc_proto protoreflect.FileDescriptor

var file_arithmetic_svc_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x10, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf4, 0x01, 0x0a,
	0x11, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_arithmetic_svc_proto_goTypes = []interface{}{
	(*OperationParameters)(nil), // 0: pb.OperationParameters
	(*Answer)(nil),              // 1: pb.Answer
}
var file_arithmetic_svc_proto_depIdxs = []int32{
	0, // 0: pb.ArithmeticService.GetAddition:input_type -> pb.OperationParameters
	0, // 1: pb.ArithmeticService.GetSubtraction:input_type -> pb.OperationParameters
	0, // 2: pb.ArithmeticService.GetMultiplication:input_type -> pb.OperationParameters
	0, // 3: pb.ArithmeticService.GetDivision:input_type -> pb.OperationParameters
	1, // 4: pb.ArithmeticService.GetAddition:output_type -> pb.Answer
	1, // 5: pb.ArithmeticService.GetSubtraction:output_type -> pb.Answer
	1, // 6: pb.ArithmeticService.GetMultiplication:output_type -> pb.Answer
	1, // 7: pb.ArithmeticService.GetDivision:output_type -> pb.Answer
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_arithmetic_svc_proto_init() }
func file_arithmetic_svc_proto_init() {
	if File_arithmetic_svc_proto != nil {
		return
	}
	file_number_msg_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arithmetic_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arithmetic_svc_proto_goTypes,
		DependencyIndexes: file_arithmetic_svc_proto_depIdxs,
	}.Build()
	File_arithmetic_svc_proto = out.File
	file_arithmetic_svc_proto_rawDesc = nil
	file_arithmetic_svc_proto_goTypes = nil
	file_arithmetic_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArithmeticServiceClient is the client API for ArithmeticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithmeticServiceClient interface {
	//
	//returns the result of adding two numbers
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetAddition(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error)
	//
	//returns the result of subtracting one number from the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetSubtraction(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error)
	//
	//returns the result of multiplying one number by the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetMultiplication(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error)
	//
	//returns the result of dividing one number by the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetDivision(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error)
}

type arithmeticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArithmeticServiceClient(cc grpc.ClientConnInterface) ArithmeticServiceClient {
	return &arithmeticServiceClient{cc}
}

func (c *arithmeticServiceClient) GetAddition(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/GetAddition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) GetSubtraction(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/GetSubtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) GetMultiplication(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/GetMultiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) GetDivision(ctx context.Context, in *OperationParameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/GetDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServiceServer is the server API for ArithmeticService service.
type ArithmeticServiceServer interface {
	//
	//returns the result of adding two numbers
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetAddition(context.Context, *OperationParameters) (*Answer, error)
	//
	//returns the result of subtracting one number from the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetSubtraction(context.Context, *OperationParameters) (*Answer, error)
	//
	//returns the result of multiplying one number by the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetMultiplication(context.Context, *OperationParameters) (*Answer, error)
	//
	//returns the result of dividing one number by the other
	//
	//service responses:
	//InvalidArgument: Invalid or empty numbers
	//Internal: An unexpected server error occurred
	GetDivision(context.Context, *OperationParameters) (*Answer, error)
}

// UnimplementedArithmeticServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArithmeticServiceServer struct {
}

func (*UnimplementedArithmeticServiceServer) GetAddition(context.Context, *OperationParameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddition not implemented")
}
func (*UnimplementedArithmeticServiceServer) GetSubtraction(context.Context, *OperationParameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtraction not implemented")
}
func (*UnimplementedArithmeticServiceServer) GetMultiplication(context.Context, *OperationParameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiplication not implemented")
}
func (*UnimplementedArithmeticServiceServer) GetDivision(context.Context, *OperationParameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDivision not implemented")
}

func RegisterArithmeticServiceServer(s *grpc.Server, srv ArithmeticServiceServer) {
	s.RegisterService(&_ArithmeticService_serviceDesc, srv)
}

func _ArithmeticService_GetAddition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).GetAddition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/GetAddition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).GetAddition(ctx, req.(*OperationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_GetSubtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).GetSubtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/GetSubtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).GetSubtraction(ctx, req.(*OperationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_GetMultiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).GetMultiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/GetMultiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).GetMultiplication(ctx, req.(*OperationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_GetDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).GetDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/GetDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).GetDivision(ctx, req.(*OperationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArithmeticService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ArithmeticService",
	HandlerType: (*ArithmeticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddition",
			Handler:    _ArithmeticService_GetAddition_Handler,
		},
		{
			MethodName: "GetSubtraction",
			Handler:    _ArithmeticService_GetSubtraction_Handler,
		},
		{
			MethodName: "GetMultiplication",
			Handler:    _ArithmeticService_GetMultiplication_Handler,
		},
		{
			MethodName: "GetDivision",
			Handler:    _ArithmeticService_GetDivision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arithmetic_svc.proto",
}
